<script>
  import confetti from 'canvas-confetti';
  window.confetti = confetti;
</script>

<div x-data="{
  submitted: false,
  selectedDate: '2024-11-29',
  selectedTime: '',
  handleSubmit(e) {
    e.preventDefault()
    const rawDate = e.target.date.value
    this.selectedDate = rawDate
    this.selectedTime = e.target.time.value

    // Format the date to match frontend display
    const formattedDate = new Date(rawDate).toLocaleDateString('en-AU', {
      weekday: 'short',
      day: 'numeric',
      month: 'short'
    })

    // Create a hidden input for the formatted date
    const dateInput = document.createElement('input')
    dateInput.type = 'hidden'
    dateInput.name = 'date'
    dateInput.value = formattedDate

    // Remove the original date input value
    e.target.date.remove()

    // Add the new formatted date input
    e.target.appendChild(dateInput)

    fetch('/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams(new FormData(e.target)).toString()
    })
    .then(() => {
      this.submitted = true
      e.target.reset()
      window.confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 },
        colors: ['#71201E', '#FBF9E5']
      });
    })
  },
  allowedDates: [
    '2024-11-29',
    '2024-11-30',
    '2024-12-11',
    '2024-12-12',
    '2024-12-13',
    '2024-12-14'
  ],
  isDateAllowed(date) {
    return this.allowedDates.includes(date);
  }
}" x-init="$nextTick(() => {
  // Force the date input to show the correct initial value on page load
  document.getElementById('date').value = selectedDate
})">
  <form
    name="Booking Form"
    method="POST"
    data-netlify="true"
    data-netlify-honeypot="bot-field"
    data-netlify-recaptcha="true"
    class="mt-4 space-y-4 text-left"
    @submit="handleSubmit"
    x-show="!submitted"
    action="/success"
  >
    <div class="hidden">
      <label>
        Don't fill this out if you're human:
        <input name="bot-field" />
      </label>
    </div>

    <input type="hidden" name="form-name" value="Booking Form" />
    <!-- <input
      type="hidden"
      name="subject"
      value="COSMO'S BOOKING %{name} (%{guests}) %{date} %{time}"
    /> -->

    <div>
      <label for="name" class="block text-[rgb(113,32,30)] font-mono">Name</label>
      <input
        type="text"
        name="name"
        id="name"
        required
        class="w-full p-2 border-2 border-[rgb(113,32,30)] rounded bg-[rgb(251,249,229)]"
      />
    </div>

    <div>
      <label for="phone" class="block text-[rgb(113,32,30)] font-mono">Phone</label>
      <input
        type="tel"
        name="phone"
        id="phone"
        required
        class="w-full p-2 border-2 border-[rgb(113,32,30)] rounded bg-[rgb(251,249,229)]"
      />
    </div>

    <div>
      <label for="email" class="block text-[rgb(113,32,30)] font-mono">Email</label>
      <input
        type="email"
        name="email"
        id="email"
        required
        class="w-full p-2 border-2 border-[rgb(113,32,30)] rounded bg-[rgb(251,249,229)]"
      />
    </div>

    <div x-data="{
      availableTimes: [
        '17:00', '17:15', '17:30', '17:45',
        '18:00', '18:15', '18:30', '18:45'
      ],
      selectedDate: '',
      selectedTime: '',
      init() {
        this.updateTimes()
      },
      updateTimes() {
        if (!this.selectedDate || !$root.isDateAllowed(this.selectedDate)) {
          return;
        }

        const now = new Date();
        const selected = new Date(this.selectedDate);
        const isToday = selected.toDateString() === now.toDateString();

        if (isToday) {
          const currentTime = now.getHours() * 60 + now.getMinutes();
          this.availableTimes = this.availableTimes.filter(time => {
            const [hours, minutes] = time.split(':').map(Number);
            const timeInMinutes = hours * 60 + minutes;
            return timeInMinutes > currentTime + 30;
          });
        }
      }
    }" class="flex gap-4">
      <div class="relative flex-1">
        <label for="date" class="block text-[rgb(113,32,30)] font-mono">Date</label>
        <select
          name="date"
          id="date"
          required
          x-model="selectedDate"
          @change="updateTimes"
          class="w-full h-[42px] p-2 pr-12 border-2 border-[rgb(113,32,30)] rounded bg-[rgb(251,249,229)] appearance-none cursor-pointer"
        >
          <template x-for="date in allowedDates" :key="date">
            <option
              :value="date"
              x-text="new Date(date).toLocaleDateString('en-AU', {
                weekday: 'short',
                day: 'numeric',
                month: 'short'
              })"
            ></option>
          </template>
        </select>
        <svg xmlns="http://www.w3.org/2000/svg" class="size-8 absolute right-2 top-[28px] p-1 pointer-events-none text-[rgb(113,32,30)]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
        </svg>
      </div>

      <div class="relative flex-1">
        <label for="time" class="block text-[rgb(113,32,30)] font-mono">Time</label>
        <select
          name="time"
          id="time"
          required
          x-model="selectedTime"
          class="w-full h-[42px] p-2 pr-12 border-2 border-[rgb(113,32,30)] rounded bg-[rgb(251,249,229)] appearance-none cursor-pointer"
        >
          <option value="">Select a time</option>
          <template x-for="time in availableTimes" :key="time">
            <option
              x-text="(() => {
                const [hours] = time.split(':');
                const hour = parseInt(hours);
                const ampm = hour >= 12 ? 'PM' : 'AM';
                const hour12 = hour % 12 || 12;
                return `${hour12}:${time.split(':')[1]} ${ampm}`;
              })()"
              :value="time">
            </option>
          </template>
        </select>
        <svg xmlns="http://www.w3.org/2000/svg" class="size-10 absolute right-2 top-[24px] p-1 pointer-events-none text-black" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
    </div>

    <div>
      <label class="block text-[rgb(113,32,30)] font-mono mb-2">Number of Guests</label>
      <div class="flex flex-wrap gap-3">
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="guests" value="1" required class="mr-1" />
          1
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="guests" value="2" class="mr-1" />
          2
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="guests" value="3" class="mr-1" />
          3
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="guests" value="4" class="mr-1" />
          4
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="guests" value="5" class="mr-1" />
          5
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="guests" value="6" class="mr-1" />
          6
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="guests" value="7" class="mr-1" />
          7
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="guests" value="8" class="mr-1" />
          8 or More
        </label>
      </div>
    </div>

    <!-- <div data-netlify-recaptcha="true"></div> -->

    <button
      type="submit"
      class="w-full py-2 px-4 bg-[rgb(113,32,30)] text-white rounded font-mono transition-all duration-200 hover:opacity-90"
    >
      Submit Your Booking
    </button>
  </form>

  <div
    x-show="submitted"
    class="text-left py-8 text-[rgb(113,32,30)] font-mono"
  >
    <p class="text-xl font-bold mb-2">Booking Request Received!</p>
    <p>Thanks for booking COSMO's.<br>We'll see you at <span class="font-bold">159 Monash Road, Parkville</span> at
      <span class="font-bold">
        <span x-text="(() => {
          const [hours, minutes] = selectedTime.split(':');
          const hour = parseInt(hours);
          const ampm = hour >= 12 ? 'PM' : 'AM';
          const hour12 = hour % 12 || 12;
          return `${hour12}:${minutes} ${ampm}`;
        })()"></span> on
        <span x-text="new Date(selectedDate).toLocaleDateString('en-AU', { weekday: 'long', day: 'numeric', month: 'long' })"></span></span>.
    </p>
  </div>
</div>

<style>
  /* Add this to disable non-allowed dates in the calendar */
  input[type="date"]::-webkit-calendar-picker-indicator {
    background: transparent;
    bottom: 0;
    color: transparent;
    cursor: pointer;
    height: auto;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    width: auto;
  }
</style>

<script>
  // Add this script to handle date restrictions
  document.addEventListener('DOMContentLoaded', () => {
    const dateInputs = document.querySelectorAll('input[type="date"][data-allowed-dates]');

    dateInputs.forEach(input => {
      const allowedDates = JSON.parse(input.dataset.allowedDates);

      input.addEventListener('input', (e) => {
        const selectedDate = e.target.value;
        if (!allowedDates.includes(selectedDate)) {
          e.target.value = '';
          alert('Please select one of the available dates:\n' + allowedDates.join('\n'));
        }
      });
    });
  });
</script>
